#install.packages("car"")
#install.packages("MASS")
#install.packages("stargazer")
#install.packages("lmtest")
#install.packages("zoo")
#install.packages("erer")
#install.packages("caret")
#install.packages("e1071")
#install.packages("arsenal")
library(tidyverse)
library(knitr)
library(foreign)
library(ggplot2)
library(dplyr)
library(plotly)
library(car)
library(MASS)
library(stargazer)
library(lmtest)
library(zoo)
library(erer)
library(lattice)
library(caret)
library(e1071)
library(arsenal)
# Import the data and look at the first six rows
Datos <- read.csv(file = 'Datos_Imertual.csv')
#dataframe %>% head()
dim(Datos)
#
Datos %>% count(Cat.Rev.Year)
# Convert to a factor with ordered level
Datos$Cat.Rev.Year <- factor(Datos$Cat.Rev.Year, order = TRUE,
levels =c("1. Menos de 1M",
"2. Más de 1M y menos de 5M",
"3. Más de 5M y menos de 20M",
"4. Más de 20M"))
#
Datos %>% count(Cat.Rev.Year)
#
Datos$year <- factor(Datos$year)
Datos$mes <- factor(Datos$mes)
#
Datos %>% count(year)
Datos %>% count(mes)
#
Datos$positive_n <- 0
Datos$positive_n[(Datos$positive_year <= 4)] <- 1
Datos$positive_n[(Datos$positive_year > 4) & (Datos$positive_year <= 60)] <- 2
Datos$positive_n[(Datos$positive_year > 60)] <- 3
Datos$positive_n <- factor(Datos$positive_n)
#
Datos$negative_n <- 0
Datos$negative_n[(Datos$negative_year <= 1)] <- 1
Datos$negative_n[(Datos$negative_year > 1) & (Datos$negative_year <= 10)] <- 2
Datos$negative_n[(Datos$negative_year > 10)] <- 3
Datos$negative_n <- factor(Datos$negative_n)
#
Datos$Followers_n <- 0
Datos$Followers_n[(Datos$Followers_year <= 50)] <- 1
Datos$Followers_n[(Datos$Followers_year > 50) & (Datos$Followers_year <= 500)] <- 2
Datos$Followers_n[(Datos$Followers_year > 500)] <- 3
Datos$Followers_n <- factor(Datos$Followers_n)
#
Datos$Reviews_n <- 0
Datos$Reviews_n[(Datos$Reviews_year <= 5)] <- 1
Datos$Reviews_n[(Datos$Reviews_year > 5) & (Datos$Reviews_year <= 50)] <- 2
Datos$Reviews_n[(Datos$Reviews_year > 50)] <- 3
Datos$Reviews_n <- factor(Datos$Reviews_n)
#
Datos %>% count(positive_n)
Datos %>% count(negative_n)
Datos %>% count(Followers_n)
Datos %>% count(Reviews_n)
table_Todos <- tableby(~revenue_year + Price + year + mes + positive_year + negative_year + Followers_year + Reviews_year + positive_n + negative_n + Followers_n + Reviews_n + Score + Adventure + Singleplayer + Story.Rich + Horror + X3D + Survival + Choices.Matter + Historical + Mystery + Replay.Value + Early.Access + Female.Protagonist + Lovecraftian + Open.World + Multiplayer + Co.op + Indie + Atmospheric + Violent + Online.Co.Op + Third.Person + Sandbox + Strategy + Difficult + Gore + Soundtrack + Great.Soundtrack + First.Person + Simulation + RPG + Character.Customization + Funny + Casual + Sci.fi + Exploration + Action + Sexual.Content + Realistic + Nudity + Fantasy + Anime + Building + Turn.Based + Tactical + Management + Psychological + Visual.Novel + Psychological.Horror + Moddable + Crafting, data = Datos)
summary(table_Todos, title = "Base Completa")
Datos_Menos_1M <- subset(Datos, Cat.Rev.Year == "1. Menos de 1M")
table_M_1M <- tableby(~revenue_year + Price + year + mes + positive_year + negative_year + Followers_year + Reviews_year + positive_n + negative_n + Followers_n + Reviews_n + Score + Adventure + Singleplayer + Story.Rich + Horror + X3D + Survival + Choices.Matter + Historical + Mystery + Replay.Value + Early.Access + Female.Protagonist + Lovecraftian + Open.World + Multiplayer + Co.op + Indie + Atmospheric + Violent + Online.Co.Op + Third.Person + Sandbox + Strategy + Difficult + Gore + Soundtrack + Great.Soundtrack + First.Person + Simulation + RPG + Character.Customization + Funny + Casual + Sci.fi + Exploration + Action + Sexual.Content + Realistic + Nudity + Fantasy + Anime + Building + Turn.Based + Tactical + Management + Psychological + Visual.Novel + Psychological.Horror + Moddable + Crafting, data = Datos_Menos_1M)
summary(table_M_1M, title = "Base Sólo los de Menos de 1 M")
set.seed(1234)
Datos_Menos_1M_10p <- Datos_Menos_1M[sample(nrow(Datos_Menos_1M), 1700, replace = FALSE), ]
table_M_1M_10p <- tableby(~revenue_year + Price + year + mes + positive_year + negative_year + Followers_year + Reviews_year + positive_n + negative_n + Followers_n + Reviews_n + Score + Adventure + Singleplayer + Story.Rich + Horror + X3D + Survival + Choices.Matter + Historical + Mystery + Replay.Value + Early.Access + Female.Protagonist + Lovecraftian + Open.World + Multiplayer + Co.op + Indie + Atmospheric + Violent + Online.Co.Op + Third.Person + Sandbox + Strategy + Difficult + Gore + Soundtrack + Great.Soundtrack + First.Person + Simulation + RPG + Character.Customization + Funny + Casual + Sci.fi + Exploration + Action + Sexual.Content + Realistic + Nudity + Fantasy + Anime + Building + Turn.Based + Tactical + Management + Psychological + Visual.Novel + Psychological.Horror + Moddable + Crafting, data = Datos_Menos_1M_10p)
summary(table_M_1M_10p, title = "Base Sólo 10% de los de Menos de 1 M")
Datos_Otros <- subset(Datos, Cat.Rev.Year != "1. Menos de 1M")
Datos_Subset <- rbind(Datos_Menos_1M_10p, Datos_Otros)
Datos_Subset %>% count(Cat.Rev.Year)
set.seed(1234)
trainIndex <- createDataPartition(Datos_Subset$Cat.Rev.Year,
p = 0.7,
list = FALSE,
times = 1)
Train <- Datos_Subset[ trainIndex, ]
Valid <- Datos_Subset[-trainIndex, ]
Train %>% count(Cat.Rev.Year)
Valid %>% count(Cat.Rev.Year)
table_Train <- tableby(~Cat.Rev.Year + Price + year + mes + positive_year + negative_year + Followers_year + Reviews_year + positive_n + negative_n + Followers_n + Reviews_n + Score + Adventure + Singleplayer + Story.Rich + Horror + X3D + Survival + Choices.Matter + Historical + Mystery + Replay.Value + Early.Access + Female.Protagonist + Lovecraftian + Open.World + Multiplayer + Co.op + Indie + Atmospheric + Violent + Online.Co.Op + Third.Person + Sandbox + Strategy + Difficult + Gore + Soundtrack + Great.Soundtrack + First.Person + Simulation + RPG + Character.Customization + Funny + Casual + Sci.fi + Exploration + Action + Sexual.Content + Realistic + Nudity + Fantasy + Anime + Building + Turn.Based + Tactical + Management + Psychological + Visual.Novel + Psychological.Horror + Moddable + Crafting, data = Train)
summary(table_Train, title = "Base Train")
# Tree - based:
OLM_01 <- polr(Cat.Rev.Year ~ Price + Score + Followers_n + positive_n + Adventure + Singleplayer + Story.Rich + Horror + X3D + Survival + Choices.Matter + Historical + Mystery + Replay.Value + Early.Access + Female.Protagonist + Lovecraftian + Open.World + Multiplayer + Co.op + Indie + Atmospheric + Violent + Online.Co.Op + Third.Person + Sandbox + Strategy + Difficult + Gore + Soundtrack + Great.Soundtrack + Simulation + RPG + Character.Customization + Funny + Sci.fi + Exploration + Action + Sexual.Content, data = Train, Hess = TRUE, method = "logistic")
# Eliminadas: + First.Person + Casual
# Spearman Corr based
#OLM_01 <- polr(Cat.Rev.Year ~ Price + Score + Followers_n + positive_n + Adventure + Singleplayer + Story.Rich + Horror + X3D + Survival + Choices.Matter + Historical + Mystery + Replay.Value + Early.Access + Female.Protagonist + Lovecraftian + Great.Soundtrack + Soundtrack + Multiplayer + Open.World + Atmospheric + Co.op + Sandbox + Anime + Casual + First.Person + Online.Co.Op + RPG + Fantasy + Building + Third.Person + Funny + Exploration + Sci.fi + Turn.Based + Tactical + Indie + Management + Psychological + Visual.Novel + Psychological.Horror + Moddable + Crafting, data = Train, Hess = TRUE, method = "logistic")
# Eliminadas: + First.Person
summary(OLM_01)
# Tree - based:
OLM_01 <- polr(Cat.Rev.Year ~ Price + Score + Followers_n + positive_n + Adventure + Singleplayer + Story.Rich + Horror + X3D + Survival + Choices.Matter + Historical + Mystery + Replay.Value + Early.Access + Female.Protagonist + Lovecraftian + Open.World + Multiplayer + Co.op + Indie + Atmospheric + Violent + Online.Co.Op + Third.Person + Sandbox + Strategy + Difficult + Gore + Soundtrack + Great.Soundtrack + Simulation + RPG + Character.Customization + Funny + Sci.fi + Exploration + Action + Sexual.Content, data = Train, Hess = TRUE, method = "logistic")
# Eliminadas: + First.Person + Casual
# Spearman Corr based
#OLM_01 <- polr(Cat.Rev.Year ~ Price + Score + Followers_n + positive_n + Adventure + Singleplayer + Story.Rich + Horror + X3D + Survival + Choices.Matter + Historical + Mystery + Replay.Value + Early.Access + Female.Protagonist + Lovecraftian + Great.Soundtrack + Soundtrack + Multiplayer + Open.World + Atmospheric + Co.op + Sandbox + Anime + Casual + First.Person + Online.Co.Op + RPG + Fantasy + Building + Third.Person + Funny + Exploration + Sci.fi + Turn.Based + Tactical + Indie + Management + Psychological + Visual.Novel + Psychological.Horror + Moddable + Crafting, data = Train, Hess = TRUE, method = "logistic")
# Eliminadas: + First.Person
saveRDS(OLM_01, "OLM_01_model.rds")
summary(OLM_01)
OLM_01_coef <- data.frame(coef(summary(OLM_01)))
OLM_01_coef$pval = round((pnorm(abs(OLM_01_coef$t.value), lower.tail = FALSE) * 2), 2)
#OLM_01_coef
stargazer(OLM_01, type = "text")
OLM_01_ME <- ocME(OLM_01, rev.dum = TRUE, digits = 5)
#OLM_01_ME
#OLM_01_ME$out
#
Probs <- data.frame(predict(OLM_01, newdata = Valid, type = "probs") )
Class <- data.frame(predict(OLM_01, newdata = Valid, type = "class") )
#
names(Probs)[1] <- "Menos.de.1M"
names(Probs)[2] <- "Más.de.1M.y.menos.de.5M"
names(Probs)[3] <- "Más.de.5M.y.menos.de.20M"
names(Probs)[4] <- "Más.de.20M"
#
Valid <- cbind(Valid, Probs)
#
names(Class)[1] <- "Class.Predict"
#
Valid <- cbind(Valid, Class)
#
Valid$Compare <- 0
Valid$Compare[as.numeric(Valid$Cat.Rev.Year) == as.numeric(Valid$Class.Predict)] <- 1
Final <- cbind( data.frame(Valid %>% count(Cat.Rev.Year)) ,  data.frame(Valid %>% group_by(Cat.Rev.Year) %>% summarise(Compare = sum(Compare))) )
Final$Porcentaje <- 100 * Final$Compare / Final$n
Final
#
#Creating confusion matrix
Conf_Matrix <- confusionMatrix(data = Valid$Class.Predict, reference = Valid$Cat.Rev.Year)
#Display results
Conf_Matrix
#
Probs <- data.frame(predict(OLM_01, newdata = Datos, type = "probs") )
Class <- data.frame(predict(OLM_01, newdata = Datos, type = "class") )
#
Datos$Compare <- 0
Datos$Compare[as.numeric(Datos$Cat.Rev.Year) == as.numeric(Datos$Class.Predict)] <- 1
Final <- cbind( data.frame(Datos %>% count(Cat.Rev.Year)) ,  data.frame(Datos %>% group_by(Cat.Rev.Year) %>% summarise(Compare = sum(Compare))) )
Final$Porcentaje <- 100 * Final$Compare / Final$n
Final
#
#Creating confusion matrix
Conf_Matrix <- confusionMatrix(data = Datos$Class.Predict, reference = Datos$Cat.Rev.Year)
#
Probs <- data.frame(predict(OLM_01, newdata = Datos, type = "probs") )
Class <- data.frame(predict(OLM_01, newdata = Datos, type = "class") )
#
names(Probs)[1] <- "Menos.de.1M"
names(Probs)[2] <- "Más.de.1M.y.menos.de.5M"
names(Probs)[3] <- "Más.de.5M.y.menos.de.20M"
names(Probs)[4] <- "Más.de.20M"
#
Datos <- cbind(Datos, Probs)
#
names(Class)[1] <- "Class.Predict"
#
Datos <- cbind(Datos, Class)
#
Datos$Compare <- 0
Datos$Compare[as.numeric(Datos$Cat.Rev.Year) == as.numeric(Datos$Class.Predict)] <- 1
Final <- cbind( data.frame(Datos %>% count(Cat.Rev.Year)) ,  data.frame(Datos %>% group_by(Cat.Rev.Year) %>% summarise(Compare = sum(Compare))) )
Final$Porcentaje <- 100 * Final$Compare / Final$n
Final
#
#Creating confusion matrix
Conf_Matrix <- confusionMatrix(data = Datos$Class.Predict, reference = Datos$Cat.Rev.Year)
#Display results
Conf_Matrix
#
Check <- subset(Datos, (Class.Predict == "3. Más de 5M y menos de 20M") & (Compare == 1) & (Más.de.5M.y.menos.de.20M >= 0.45) )
#View(Check)
#
setup_01 <- data.frame(Price = 24.99, Score = 9, Followers_n = factor(3), positive_n = factor(3),
Adventure = 1, Singleplayer = 1, Story.Rich = 0, Horror = 0, X3D = 1, Survival = 1,
Choices.Matter = 0, Historical = 0, Mystery = 0, Replay.Value = 0, Early.Access = 1,
Female.Protagonist = 0, Lovecraftian = 0,
Open.World = 1, Multiplayer = 1, Co.op = 1, Indie = 1, Atmospheric = 0, Violent = 0,
Online.Co.Op = 1, Third.Person = 1, Sandbox = 1, Strategy = 0, Difficult = 0, Gore = 0,
Soundtrack = 0, Great.Soundtrack = 0, Simulation = 0, RPG = 1, Character.Customization = 1,
Funny = 0, Sci.fi = 0, Exploration = 0, Action = 1, Sexual.Content = 0 )
# Eliminadas: + First.Person + Casual
#
#setup_02 <- data.frame(Price = 29.99, Score = 10, Followers_n = factor(2), positive_n = factor(2), Adventure = 1, Singleplayer = 0, Story.Rich = 1, Horror = 1, X3D = 1, Survival = 1, Choices.Matter = 1, Historical = 1, Mystery = 1, Replay.Value = 1, Early.Access = 1,  Female.Protagonist = 0, Lovecraftian = 1, Great.Soundtrack = 0, Soundtrack = 0, Multiplayer = 0, Open.World = 0, Atmospheric = 0, Co.op = 0, Sandbox = 0, Anime = 0, Casual = 0, First.Person = 0, Online.Co.Op = 0, RPG = 0, Fantasy = 0, Building = 0, Third.Person = 0, Funny = 0, Exploration = 0, Sci.fi = 0, Turn.Based = 0, Tactical = 0, Indie = 1, Management = 0, Psychological = 0, Visual.Novel = 0, Psychological.Horror = 0, Moddable = 0, Crafting = 0 )
# Predicción dado el setup or valid set
predict(OLM_01, newdata = setup_01, type = "probs")
data.frame(predict(OLM_01, newdata = setup_01, type = "class") )
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
#tinytex::install_tinytex()
#installed.packages('foreign')
#install.packages("ggplot2")
#install.packages("dplyr")
#install.packages("plotly")
#install.packages("car"")
#install.packages("MASS")
#install.packages("stargazer")
#install.packages("lmtest")
#install.packages("zoo")
#install.packages("erer")
#install.packages("caret")
#install.packages("e1071")
#install.packages("arsenal")
#install.packages("sandwich")
#install.packages("betareg")
#install.packages("mfx")
library(tidyverse)
library(knitr)
library(foreign)
library(ggplot2)
library(dplyr)
library(plotly)
library(car)
library(MASS)
library(stargazer)
library(lmtest)
library(zoo)
library(erer)
library(lattice)
library(caret)
library(e1071)
library(arsenal)
library(sandwich)
library(betareg)
library(mfx)
# Import the data and look at the first six rows
Datos <- read.csv(file = 'Datos_Imertual.csv')
#dataframe %>% head()
dim(Datos)
#
Datos$Cat.Rev.Year.Bin <- ''
Datos$Cat.Rev.Year.Bin[(Datos$Cat.Rev.Year == '1. Menos de 1M')] <- '1. Menos de 1M'
Datos$Cat.Rev.Year.Bin[(Datos$Cat.Rev.Year != '1. Menos de 1M')] <- '2. Más de 1M'
#
Datos %>% count(Cat.Rev.Year.Bin)
# Convert to a factor with ordered level
Datos$Cat.Rev.Year.Bin <- factor(Datos$Cat.Rev.Year.Bin, order = TRUE,
levels =c("1. Menos de 1M",
"2. Más de 1M"))
#
Datos %>% count(Cat.Rev.Year.Bin)
#
Datos$year <- factor(Datos$year)
Datos$mes <- factor(Datos$mes)
#
Datos %>% count(year)
Datos %>% count(mes)
#
Datos$positive_n <- 0
Datos$positive_n[(Datos$positive_year <= 4)] <- 1
Datos$positive_n[(Datos$positive_year > 4) & (Datos$positive_year <= 60)] <- 2
Datos$positive_n[(Datos$positive_year > 60)] <- 3
Datos$positive_n <- factor(Datos$positive_n)
#
Datos$negative_n <- 0
Datos$negative_n[(Datos$negative_year <= 1)] <- 1
Datos$negative_n[(Datos$negative_year > 1) & (Datos$negative_year <= 10)] <- 2
Datos$negative_n[(Datos$negative_year > 10)] <- 3
Datos$negative_n <- factor(Datos$negative_n)
#
Datos$Followers_n <- 0
Datos$Followers_n[(Datos$Followers_year <= 50)] <- 1
Datos$Followers_n[(Datos$Followers_year > 50) & (Datos$Followers_year <= 500)] <- 2
Datos$Followers_n[(Datos$Followers_year > 500)] <- 3
Datos$Followers_n <- factor(Datos$Followers_n)
#
Datos$Reviews_n <- 0
Datos$Reviews_n[(Datos$Reviews_year <= 5)] <- 1
Datos$Reviews_n[(Datos$Reviews_year > 5) & (Datos$Reviews_year <= 50)] <- 2
Datos$Reviews_n[(Datos$Reviews_year > 50)] <- 3
Datos$Reviews_n <- factor(Datos$Reviews_n)
#
Datos %>% count(positive_n)
Datos %>% count(negative_n)
Datos %>% count(Followers_n)
Datos %>% count(Reviews_n)
table_Todos <- tableby(~revenue_year + Price + year + mes + positive_year + negative_year + Followers_year + Reviews_year + positive_n + negative_n + Followers_n + Reviews_n + Score + Adventure + Singleplayer + Story.Rich + Horror + X3D + Survival + Choices.Matter + Historical + Mystery + Replay.Value + Early.Access + Female.Protagonist + Lovecraftian + Open.World + Multiplayer + Co.op + Indie + Atmospheric + Violent + Online.Co.Op + Third.Person + Sandbox + Strategy + Difficult + Gore + Soundtrack + Great.Soundtrack + First.Person + Simulation + RPG + Character.Customization + Funny + Casual + Sci.fi + Exploration + Action + Sexual.Content + Realistic + Nudity + Fantasy + Anime + Building + Turn.Based + Tactical + Management + Psychological + Visual.Novel + Psychological.Horror + Moddable + Crafting, data = Datos)
summary(table_Todos, title = "Base Completa")
Datos_Menos_1M <- subset(Datos, Cat.Rev.Year.Bin == "1. Menos de 1M")
table_M_1M <- tableby(~revenue_year + Price + year + mes + positive_year + negative_year + Followers_year + Reviews_year + positive_n + negative_n + Followers_n + Reviews_n + Score + Adventure + Singleplayer + Story.Rich + Horror + X3D + Survival + Choices.Matter + Historical + Mystery + Replay.Value + Early.Access + Female.Protagonist + Lovecraftian + Open.World + Multiplayer + Co.op + Indie + Atmospheric + Violent + Online.Co.Op + Third.Person + Sandbox + Strategy + Difficult + Gore + Soundtrack + Great.Soundtrack + First.Person + Simulation + RPG + Character.Customization + Funny + Casual + Sci.fi + Exploration + Action + Sexual.Content + Realistic + Nudity + Fantasy + Anime + Building + Turn.Based + Tactical + Management + Psychological + Visual.Novel + Psychological.Horror + Moddable + Crafting, data = Datos_Menos_1M)
summary(table_M_1M, title = "Base Sólo los de Menos de 1 M")
set.seed(1234)
Datos_Menos_1M_10p <- Datos_Menos_1M[sample(nrow(Datos_Menos_1M), 3570, replace = FALSE), ]
table_M_1M_10p <- tableby(~revenue_year + Price + year + mes + positive_year + negative_year + Followers_year + Reviews_year + positive_n + negative_n + Followers_n + Reviews_n + Score + Adventure + Singleplayer + Story.Rich + Horror + X3D + Survival + Choices.Matter + Historical + Mystery + Replay.Value + Early.Access + Female.Protagonist + Lovecraftian + Open.World + Multiplayer + Co.op + Indie + Atmospheric + Violent + Online.Co.Op + Third.Person + Sandbox + Strategy + Difficult + Gore + Soundtrack + Great.Soundtrack + First.Person + Simulation + RPG + Character.Customization + Funny + Casual + Sci.fi + Exploration + Action + Sexual.Content + Realistic + Nudity + Fantasy + Anime + Building + Turn.Based + Tactical + Management + Psychological + Visual.Novel + Psychological.Horror + Moddable + Crafting, data = Datos_Menos_1M_10p)
summary(table_M_1M_10p, title = "Base Sólo 10% de los de Menos de 1 M")
Datos_Otros <- subset(Datos, Cat.Rev.Year.Bin != "1. Menos de 1M")
Datos_Subset <- rbind(Datos_Menos_1M_10p, Datos_Otros)
Datos_Subset %>% count(Cat.Rev.Year.Bin)
set.seed(1234)
trainIndex <- createDataPartition(Datos_Subset$Cat.Rev.Year.Bin,
p = 0.7,
list = FALSE,
times = 1)
Train <- Datos_Subset[ trainIndex, ]
Valid <- Datos_Subset[-trainIndex, ]
Train %>% count(Cat.Rev.Year.Bin)
Valid %>% count(Cat.Rev.Year.Bin)
table_Train <- tableby(~Cat.Rev.Year.Bin + Price + year + mes + positive_year + negative_year + Followers_year + Reviews_year + positive_n + negative_n + Followers_n + Reviews_n + Score + Adventure + Singleplayer + Story.Rich + Horror + X3D + Survival + Choices.Matter + Historical + Mystery + Replay.Value + Early.Access + Female.Protagonist + Lovecraftian + Open.World + Multiplayer + Co.op + Indie + Atmospheric + Violent + Online.Co.Op + Third.Person + Sandbox + Strategy + Difficult + Gore + Soundtrack + Great.Soundtrack + First.Person + Simulation + RPG + Character.Customization + Funny + Casual + Sci.fi + Exploration + Action + Sexual.Content + Realistic + Nudity + Fantasy + Anime + Building + Turn.Based + Tactical + Management + Psychological + Visual.Novel + Psychological.Horror + Moddable + Crafting, data = Train)
summary(table_Train, title = "Base Train")
# Tree - based:
LOGIT_01 <- glm(Cat.Rev.Year.Bin ~ Price + Score + Followers_n + positive_n + Adventure + Singleplayer + Story.Rich + Horror + X3D + Survival + Choices.Matter + Historical + Mystery + Replay.Value + Early.Access + Female.Protagonist + Lovecraftian + Open.World + Multiplayer + Co.op + Indie + Atmospheric + Violent + Online.Co.Op + Third.Person + Sandbox + Strategy + Difficult + Gore + Soundtrack + Great.Soundtrack + Simulation + RPG + Character.Customization + Funny + Sci.fi + Exploration + Action + Sexual.Content, family = binomial(link = "logit"), data = Train)
# Eliminadas: + First.Person + Casual
# Spearman Corr based
#LOGIT_01 <- glm(Cat.Rev.Year.Bin ~ Price + Score + Followers_n + positive_n + Adventure + Singleplayer + Story.Rich + Horror + X3D + Survival + Choices.Matter + Historical + Mystery + Replay.Value + Early.Access + Female.Protagonist + Lovecraftian + Great.Soundtrack + Soundtrack + Multiplayer + Open.World + Atmospheric + Co.op + Sandbox + Anime + Casual + Online.Co.Op + RPG + Fantasy + Building + Third.Person + Funny + Exploration + Sci.fi + Turn.Based + Tactical + Indie + Management + Psychological + Visual.Novel + Psychological.Horror + Moddable + Crafting, family = binomial(link = "logit"), data = Train)
# Eliminadas: + First.Person
saveRDS(OLM_01, "LOGIT_01_model.rds")
#
summary(LOGIT_01)
stargazer(LOGIT_01, type = "text")
LM_01_ME <- logitmfx(Cat.Rev.Year.Bin ~ Price + Score + Followers_n + positive_n + Adventure + Singleplayer + Story.Rich + Horror + X3D + Survival + Choices.Matter + Historical + Mystery + Replay.Value + Early.Access + Female.Protagonist + Lovecraftian + Open.World + Multiplayer + Co.op + Indie + Atmospheric + Violent + Online.Co.Op + Third.Person + Sandbox + Strategy + Difficult + Gore + Soundtrack + Great.Soundtrack + First.Person + Simulation + RPG + Character.Customization + Funny + Casual + Sci.fi + Exploration + Action + Sexual.Content, data = Train)
#LM_01_ME <- logitmfx(Cat.Rev.Year.Bin ~ Price + Score + Followers_n + positive_n + Adventure + Singleplayer + Story.Rich + Horror + X3D + Survival + Choices.Matter + Historical + Mystery + Replay.Value + Early.Access + Female.Protagonist + Lovecraftian + Great.Soundtrack + Soundtrack + Multiplayer + Open.World + Atmospheric + Co.op + Sandbox + Anime + Casual + First.Person + Online.Co.Op + RPG + Fantasy + Building + Third.Person + Funny + Exploration + Sci.fi + Turn.Based + Tactical + Indie + Management + Psychological + Visual.Novel + Psychological.Horror + Moddable + Crafting, data = Train)
#LM_01_ME
#
Probs <- data.frame(predict(LOGIT_01, newdata = Valid, type = "response") )
names(Probs)[1] <- "Probs"
#
Valid <- cbind(Valid, Probs)
#
Valid$Class.Predict <- ''
Valid$Class.Predict[(Valid$Probs <= 0.5)] <- '1. Menos de 1M'
Valid$Class.Predict[(Valid$Probs > 0.5)] <- '2. Más de 1M'
#
Valid$Class.Predict <- factor(Valid$Class.Predict, order = TRUE,
levels =c("1. Menos de 1M",
"2. Más de 1M"))
#
Valid$Compare <- 0
Valid$Compare[as.numeric(Valid$Cat.Rev.Year.Bin) == as.numeric(Valid$Class.Predict)] <- 1
Final <- cbind( data.frame(Valid %>% count(Cat.Rev.Year.Bin)) ,  data.frame(Valid %>% group_by(Cat.Rev.Year.Bin) %>% summarise(Compare = sum(Compare))) )
Final$Porcentaje <- 100 * Final$Compare / Final$n
Final
#
#Creating confusion matrix
Conf_Matrix <- confusionMatrix(data = Valid$Class.Predict, reference = Valid$Cat.Rev.Year.Bin)
#Display results
Conf_Matrix
#
Probs <- data.frame(predict(LOGIT_01, newdata = Datos, type = "response") )
names(Probs)[1] <- "Probs"
#
Datos <- cbind(Datos, Probs)
#
Datos$Class.Predict <- ''
Datos$Class.Predict[(Datos$Probs <= 0.5)] <- '1. Menos de 1M'
Datos$Class.Predict[(Datos$Probs > 0.5)] <- '2. Más de 1M'
#
Datos$Class.Predict <- factor(Datos$Class.Predict, order = TRUE,
levels =c("1. Menos de 1M",
"2. Más de 1M"))
#
Datos$Compare <- 0
Datos$Compare[as.numeric(Datos$Cat.Rev.Year.Bin) == as.numeric(Datos$Class.Predict)] <- 1
Final <- cbind( data.frame(Datos %>% count(Cat.Rev.Year.Bin)) ,  data.frame(Datos %>% group_by(Cat.Rev.Year.Bin) %>% summarise(Compare = sum(Compare))) )
Final$Porcentaje <- 100 * Final$Compare / Final$n
Final
#
#Creating confusion matrix
Conf_Matrix <- confusionMatrix(data = Datos$Class.Predict, reference = Datos$Cat.Rev.Year.Bin)
#Display results
Conf_Matrix
#
Check <- subset(Datos, (Class.Predict == "2. Más de 1M") & (Compare == 1) & (Probs >= 0.99) )
#View(Check)
#
setup_01 <- data.frame(Price = 39.99, Score = 9, Followers_n = factor(3), positive_n = factor(3),
Adventure = 1, Singleplayer = 1, Story.Rich = 0, Horror = 0, X3D = 0, Survival = 0, Choices.Matter = 0, Historical = 0, Mystery = 0, Replay.Value = 0, Early.Access = 1,  Female.Protagonist = 0, Lovecraftian = 0, Open.World = 1, Multiplayer = 1, Co.op = 0, Indie = 1, Atmospheric = 0, Violent = 0,  Online.Co.Op = 0, Third.Person = 0, Sandbox = 1, Strategy = 0, Difficult = 0, Gore = 0, Soundtrack = 1, Great.Soundtrack = 0, First.Person  = 0, Simulation = 1, RPG = 0, Character.Customization = 1, Funny = 0, Casual = 0, Sci.fi = 0, Exploration = 0, Action = 1, Sexual.Content = 0 )
#
#setup_02 <- data.frame(Price = 29.99, Score = 10, Followers_n = factor(2), positive_n = factor(2), Adventure = 1, Singleplayer = 0, Story.Rich = 1, Horror = 1, X3D = 1, Survival = 1, Choices.Matter = 1, Historical = 1, Mystery = 1, Replay.Value = 1, Early.Access = 1,  Female.Protagonist = 0, Lovecraftian = 1, Great.Soundtrack = 0, Soundtrack = 0, Multiplayer = 0, Open.World = 0, Atmospheric = 0, Co.op = 0, Sandbox = 0, Anime = 0, Casual = 0, First.Person = 0, Online.Co.Op = 0, RPG = 0, Fantasy = 0, Building = 0, Third.Person = 0, Funny = 0, Exploration = 0, Sci.fi = 0, Turn.Based = 0, Tactical = 0, Indie = 1, Management = 0, Psychological = 0, Visual.Novel = 0, Psychological.Horror = 0, Moddable = 0, Crafting = 0 )
# Predicción dado el setup or valid set
predict(LOGIT_01, newdata = setup_01, type = "response")
knitr::opts_chunk$set(echo = TRUE)
OLM_01 <- readRDS("OLM_01_model.rds")
library(DT)
inputPanel(
numericInput("Price", label = "Price:",
value=24.99),
sliderInput("Score", label = "Score:",
min = 0, max = 10, value = 9, step = 1),
selectInput("Follows","Followers:",
choices = list("Choice 1" = 1,
"Choice 2" = 2,
"Choice 3" = 3,
"Choice 4" = 4), selected = 3),
selectInput("Positive","Positive:",
choices = list("Choice 1" = 1,
"Choice 2" = 2,
"Choice 3" = 3,
"Choice 4" = 4), selected = 3),
checkboxInput("Adventure", "Adventure", value = TRUE),
checkboxInput("Singleplayer", "Single Player", value = TRUE),
checkboxInput("Story.Rich", "Story Rich", value = FALSE),
checkboxInput("Horror", "Horror", value = FALSE),
checkboxInput("X3D", "X3D", value = TRUE),
checkboxInput("Survival", "Survival", value = TRUE),
checkboxInput("Choices.Matter", "Choices MAtter", value = FALSE),
checkboxInput("Historical", "Historical", value = FALSE),
checkboxInput("Mystery", "Mystery", value = FALSE),
checkboxInput("Replay.Value", "Replay Value", value = FALSE),
checkboxInput("Early.Access", "Early Acces", value = TRUE),
checkboxInput("Female.Protagonist", "Female Protagonist", value = FALSE),
checkboxInput("Lovecraftian", "Lovecraftian", value = FALSE),
checkboxInput("Open.World", "Open World", value = TRUE),
checkboxInput("Multiplayer", "Multiplayer", value = TRUE),
checkboxInput("Co.Op", "Co.op", value = TRUE),
checkboxInput("Indie", "Indie", value = TRUE),
checkboxInput("Atmospheric", "Atmospheric", value = FALSE),
checkboxInput("Violent", "Violent", value = FALSE),
checkboxInput("Online.Co.Op", "Online.Co.Op", value = TRUE),
checkboxInput("Third.Person", "Third person", value = TRUE),
checkboxInput("Sandbox", "Sandbox", value = TRUE),
checkboxInput("Strategy", "Strategy", value = FALSE),
checkboxInput("Difficult", "Dificult", value = FALSE),
checkboxInput("Gore", "Gore", value = FALSE),
checkboxInput("Soundtrack", "Soundtrack", value = FALSE),
checkboxInput("Great.Soundtrack", "Great Soundtrack", value = FALSE),
checkboxInput("Simulation", "Simulation", value = FALSE),
checkboxInput("RPG", "RPG", value = TRUE),
checkboxInput("Character.Customization", "Character Customization", value = TRUE),
checkboxInput("Funny", "Funny", value = FALSE),
checkboxInput("Sci.fi", "Sci.fi", value = FALSE),
checkboxInput("Exploration", "Exploration", value = FALSE),
checkboxInput("Action", "Action", value = TRUE),
checkboxInput("Sexual.Content", "Sexual.Content", value = FALSE)
)
renderPlot({
setup_01 <- data.frame(Price = input$Price, Score = input$Score, Followers_n = factor(input$Follows),
positive_n = factor(input$Positive), Adventure = input$Adventure, Singleplayer = input$Singleplayer,
Story.Rich = input$Story.Rich, Horror = input$Horror, X3D = input$X3D, Survival = input$Survival,
Choices.Matter = input$Choices.Matter, Historical = input$Historical, Mystery = input$Mystery,
Replay.Value = input$Replay.Value, Early.Access = input$Early.Access,
Female.Protagonist = input$Female.Protagonist, Lovecraftian = input$Lovecraftian,
Open.World = input$Open.World, Multiplayer = input$Multiplayer, Co.op = input$Co.Op,
Indie = input$Indie, Atmospheric = input$Atmospheric, Violent = input$Violent,
Online.Co.Op = input$Online.Co.Op, Third.Person = input$Third.Person, Sandbox = input$Sandbox,
Strategy = input$Strategy, Difficult = input$Difficult, Gore = input$Gore,
Soundtrack = input$Soundtrack, Great.Soundtrack = input$Great.Soundtrack,
Simulation = input$Simulation, RPG = input$RPG, Character.Customization = input$Character.Customization,
Funny = input$Funny, Sci.fi = input$Sci.fi, Exploration = input$Exploration,
Action = input$Action, Sexual.Content = input$Sexual.Content)
setup_01[,5:39] =apply(setup_01[,5:39], 2, as.numeric)
dt = as.data.frame(cbind("Group"= names(round(predict(OLM_01, newdata = setup_01, type = "probs"),4)),
"Probabilities" = round(predict(OLM_01, newdata = setup_01, type = "probs"),4)))
# Graph:
pb = ggplot(dt, aes(x = Group, y = Probabilities, fill = Group))
pb = pb + geom_bar(stat = "identity", show.legend = FALSE)
pb = pb +
theme(plot.title = element_text(size = 28, face = "bold", hjust = 0)) +
theme(plot.subtitle = element_text(size = 22, hjust = 0)) +
theme(plot.caption = element_text(size = 14, hjust = 0)) +
theme(plot.margin = unit(c(1,1,1,1), "cm")) +
theme_bw() +
theme(axis.title.x = element_text( size = 14, color = "#3C4981")) +
theme(axis.text.x = element_text( size = 12, color = "#3C4981")) +
theme(axis.title.y = element_text( size = 14, color = "#3C4981")) +
theme(axis.text.y = element_text( size = 12, color = "#3C4981")) +
scale_colour_manual(values = 'red') +
theme(text = element_text(color = "#3C4981")) +
labs(
title = "Estimated probabilities",
subtitle = "Results considering the selected configuration",
caption = "Source: Prepared by Analítica Boutique"
)
pb
}, width = "auto", height = "auto") # Podemos usar 400 u otro numero
renderTable({
setup_01 <- data.frame(Price = input$Price, Score = input$Score, Followers_n = factor(input$Follows),
positive_n = factor(input$Positive), Adventure = input$Adventure, Singleplayer = input$Singleplayer,
Story.Rich = input$Story.Rich, Horror = input$Horror, X3D = input$X3D, Survival = input$Survival,
Choices.Matter = input$Choices.Matter, Historical = input$Historical, Mystery = input$Mystery,
Replay.Value = input$Replay.Value, Early.Access = input$Early.Access,
Female.Protagonist = input$Female.Protagonist, Lovecraftian = input$Lovecraftian,
Open.World = input$Open.World, Multiplayer = input$Multiplayer, Co.op = input$Co.Op,
Indie = input$Indie, Atmospheric = input$Atmospheric, Violent = input$Violent,
Online.Co.Op = input$Online.Co.Op, Third.Person = input$Third.Person, Sandbox = input$Sandbox,
Strategy = input$Strategy, Difficult = input$Difficult, Gore = input$Gore,
Soundtrack = input$Soundtrack, Great.Soundtrack = input$Great.Soundtrack,
Simulation = input$Simulation, RPG = input$RPG, Character.Customization = input$Character.Customization,
Funny = input$Funny, Sci.fi = input$Sci.fi, Exploration = input$Exploration,
Action = input$Action, Sexual.Content = input$Sexual.Content)
setup_01[,5:39] =apply(setup_01[,5:39], 2, as.numeric)
dt = as.data.frame(cbind("Group"= names(round(predict(OLM_01, newdata = setup_01, type = "probs"),4)),
"Probabilities" = round(predict(OLM_01, newdata = setup_01, type = "probs"),4)))
dt
})
rsconnect::setAccountInfo(name='benjov',
token='6667F0C5CE33274A23034B3359994A9B',
secret='wvEmBzHd3f29P/7YIVfWC+2DLdvYrA9X31LLrWPO')
deployApp("/Users/benjaminolivavazquez/Documents/Personal/Analytics_Boutique/GitHub_2021/imertual/App2",
appName = "Imertual_small",
appTitle = "Imertual_small")
library(rsconnect)
deployApp("/Users/benjaminolivavazquez/Documents/Personal/Analytics_Boutique/GitHub_2021/imertual/App2",
appName = "Imertual_small",
appTitle = "Imertual_small")
library(rsconnect)
rsconnect::setAccountInfo(name='benjov',
token='6667F0C5CE33274A23034B3359994A9B',
secret='wvEmBzHd3f29P/7YIVfWC+2DLdvYrA9X31LLrWPO')
deployApp("/Users/benjaminolivavazquez/Documents/Personal/Analytics_Boutique/GitHub_2021/imertual/App2",
appName = "Imertual_small",
appTitle = "Imertual_small")
