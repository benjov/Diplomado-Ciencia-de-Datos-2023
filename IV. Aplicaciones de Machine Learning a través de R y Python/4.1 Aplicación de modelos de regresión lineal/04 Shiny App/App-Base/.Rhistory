shiny::runApp()
runApp('~/Library/Mobile Documents/com~apple~CloudDocs/Documents/Personal/PuntoEmpresarios/Propuestas/Taller 1 Data Viz/App-Final')
library(rsconnect)
rsconnect::setAccountInfo(name='analitica-boutique',
token='967FFB396F0EBFAA1CAF7895B8049055',
secret='T59rtncJa7geJ2yHZVxsyx9dS5FXUHTjCbxuy+ho')
deployApp("/Users/benjamin/Library/Mobile Documents/com~apple~CloudDocs/Documents/Personal/PuntoEmpresarios/Propuestas/Taller 1 Data Viz/App-Final",
appName = "App-Stock",
appTitle = "App-Stock",
account = "analitica-boutique")
install.packages("shiny")
install.packages("ggplot2")
install.packages("quantmod")
library(shiny)
library(ggplot2)
library(quantmod)
library(shiny)
library(ggplot2)
library(quantmod)
# UI
ui <- fluidPage(
# App title
titlePanel("Precios de acciones de Oracle, AMD, IBM y Nvidia"),
# Otros elementos
)
# SERVER
server <- function(input, output) {
#
# Código, llamadas a APIs y otras operaciones
}
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
library(quantmod)
?getSymbols
getSymbols("ORCL", src = "yahoo", from = '01-01-2024',
to = '26-01-2024', periodicity = "daily")
getSymbols("ORCL", src = "yahoo", from = '2024-01-01',
to = '2024-01-26', periodicity = "daily")
View(ORCL)
getSymbols("MXN=X", src = "yahoo", from = '2024-01-01',
to = '2024-01-26', periodicity = "daily")
ORCL_DF <- as.data.frame( ORCL ) # Convertimos a Data Frame
View(ORCL_DF)
View(ORCL)
View(ORCL_DF)
rownames(ORCL_DF)
as.Date( rownames(ORCL_DF) )
ORCL_DF <- as.data.frame( ORCL ) # Convertimos a Data Frame
ORCL_DF$Date <- as.Date( rownames(ORCL_DF) ) # Generamos la fecha
ORCL_DF <- as.data.frame( ORCL ) # Convertimos a Data Frame
ORCL_DF$Date <- as.Date( rownames(ORCL_DF) ) # Generamos la fecha
ORCL_DF <- ORCL_DF[ , c('Date', 'ORCL.Adjusted')] # Seleccionamos 2 variables
View(ORCL)
View(ORCL_DF)
tickers <- c("ORCL","AMD","IBM","NVDA")
getSymbols(tickers, src = "yahoo", from = '2024-01-01',
to = '2024-01-26', periodicity = "daily")
#
ORCL_DF <- as.data.frame( ORCL ) # Convertimos a Data Frame
ORCL_DF$Date <- as.Date( rownames(ORCL_DF) ) # Generamos la fecha
ORCL_DF <- ORCL_DF[ , c('Date', 'ORCL.Adjusted')] # Seleccionamos 2 variables
#
AMD_DF <- as.data.frame( AMD ) # Convertimos a Data Frame
AMD_DF$Date <- as.Date( rownames(AMD_DF) ) # Generamos la fecha
AMD_DF <- AMD_DF[ , c('Date', 'AMD.Adjusted')] # Seleccionamos 2 variables
#
IBM_DF <- as.data.frame( IBM ) # Convertimos a Data Frame
IBM_DF$Date <- as.Date( rownames(IBM_DF) ) # Generamos la fecha
IBM_DF <- IBM_DF[ , c('Date', 'IBM.Adjusted')] # Seleccionamos 2 variables
#
NVDA_DF <- as.data.frame( NVDA ) # Convertimos a Data Frame
NVDA_DF$Date <- as.Date( rownames(NVDA_DF) ) # Generamos la fecha
NVDA_DF <- NVDA_DF[ , c('Date', 'NVDA.Adjusted')] # Seleccionamos 2 variables
View(AMD_DF)
?merge
# Combina y conserva todas las filas de ambos DataFrames
DF_FINAL <- merge(ORCL_DF, AMD_DF, by = "Date", all = TRUE)
DF_FINAL <- merge(DF_FINAL, IBM_DF, by = "Date", all = TRUE)
DF_FINAL <- merge(DF_FINAL, NVDA_DF, by = "Date", all = TRUE)
View(DF_FINAL)
View(DF_FINAL)
DF_FINAL$Date
# Creamos índices
DF_FINAL_Index <- data.frame( DF_FINAL$Date,
ORCL = ( DF_FINAL$ORCL.Adjusted / DF_FINAL$ORCL.Adjusted[1] ) * 100,
AMD = ( DF_FINAL$AMD.Adjusted / DF_FINAL$AMD.Adjusted[1] ) * 100,
IBM = ( DF_FINAL$IBM.Adjusted / DF_FINAL$IBM.Adjusted[1] ) * 100,
NVDA = ( DF_FINAL$NVDA.Adjusted / DF_FINAL$NVDA.Adjusted[1] ) * 100 )
View(DF_FINAL_Index)
View(DF_FINAL_Index)
names(DF_FINAL_Index) <- c("Date","ORCL","AMD","IBM","NVDA")
ggplot( DF_FINAL_Index, aes( x = Date ) ) +
geom_line(aes(y = ORCL, color = "ORCL"), linewidth = 1) +
geom_line(aes(y = AMD, color = "AMD"), linewidth = 1) +
geom_line(aes(y = IBM, color = "IBM"), linewidth = 1) +
geom_line(aes(y = NVDA, color = "NVDA"), linewidth = 1) +
labs( title = "Gráfico de los indices de Oracle, AMD, IBM y Nvidia",
x = "Fecha", y = "Índice (Valor inicial = 100)") +
scale_color_manual(name = "Series",
values = c(ORCL = "blue", AMD = "green", IBM = "red", NVDA = "purple")) +
theme_minimal()
runApp('~/Documents/Personal/Cursos_UNAM/Diplomado_Acatlan/Diplomado-Ciencia-de-Datos-2023/IV. Aplicaciones de Machine Learning a través de R y Python/4.1 Aplicación de modelos de regresión lineal/04 Shiny App/App-Final')
getSymbols(CLPUSD=X, src = "yahoo", from = '2024-01-01',
to = '2024-01-24', periodicity = "daily")
getSymbols(CLPUSD=X, src = "yahoo", from = '2024-01-01',
to = '2024-01-24', periodicity = "daily")
getSymbols('CLPUSD=X', src = "yahoo", from = '2024-01-01',
to = '2024-01-24', periodicity = "daily")
View(`CLPUSD=X`)
install.packages('rsconnect')
install.packages("rsconnect")
library('rsconnect')
rsconnect::setAccountInfo(name='benjov01',
token='3A8AC2D248EF99225B7205F60CB91CD3',
secret='<SECRET>')
rsconnect::setAccountInfo(name='benjov01',
token='3A8AC2D248EF99225B7205F60CB91CD3',
secret='gDaUwiJ3r516GrSiylkfZ1qp50/0SkfZU7wlJZqt')
deployApp("/Users/benjamin/Documents/Personal/Cursos_UNAM/Diplomado_Acatlan/Diplomado-Ciencia-de-Datos-2023/IV. Aplicaciones de Machine Learning a través de R y Python/4.1 Aplicación de modelos de regresión lineal/04 Shiny App/App-Final",
appName = "Acciones",
appTitle = "Acciones",
account = "benjov01")
